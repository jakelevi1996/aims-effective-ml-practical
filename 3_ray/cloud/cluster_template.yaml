# An unique identifier for the head node and workers of this cluster.
cluster_name: aims-gcp

# The maximum number of workers nodes to launch in addition to the head node.
upscaling_speed: 1.0
# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 5

# Cloud-provider specific configuration.
provider:
  type: gcp
  region: us-central2
  availability_zone: us-central2-b
  project_id: ${PROJECT_ID} # Globally unique project id
  cache_stopped_nodes: True # Don't delete nodes, so we don't re-install each time.

# How Ray will authenticate with newly launched nodes.
# By default Ray creates a new private keypair, but you can also use your own.
# If you do so, make sure to also set "KeyName" in the head and worker node
# configurations below. This requires that you have added the key into the
# project wide meta-data.
auth:
  ssh_user: ${SSH_USER}
  ssh_private_key: ${SSH_KEY}

# Tell the autoscaler the allowed node types and the resources they provide.
# The key is the name of the node type, which is just for debugging purposes.
# The node config specifies the launch config and physical instance type.
available_node_types:
  ray_cpu_head:
    # The resources provided by this node type.
    resources: {"CPU": 0} # Don't allocate any jobs to head node.
    node_config:
      KeyName: ${SSH_KEY}
      # Making head node reasonably beefy just in case...
      machineType: n1-standard-16
      disks:
        - boot: true
          autoDelete: true
          type: PERSISTENT
          initializeParams:
            diskSizeGb: 150
            # See https://cloud.google.com/compute/docs/images for more images
            sourceImage: projects/deeplearning-platform-release/global/images/family/common-cpu
  ray_cpu_worker:
    min_workers: 0
    max_workers: 4
    resources: {"CPU": 2}
    node_config:
        KeyName: ${SSH_KEY}
        machineType: n1-standard-2
        disks:
          - boot: true
            autoDelete: true
            type: PERSISTENT
            initializeParams:
              diskSizeGb: 150
              # See https://cloud.google.com/compute/docs/images for more images
              sourceImage: projects/deeplearning-platform-release/global/images/family/common-cpu
        schedulingConfig:
            preemptible: true
  # Can't use GPUs without upgrading to a paid account :((
  ray_worker_gpu:
    # The minimum number of nodes of this type to launch.
    # This number should be >= 0.
    min_workers: 0
    # The maximum number of workers nodes of this type to launch.
    # This takes precedence over min_workers.
    max_workers: 0
    # The resources provided by this node type.
    resources: {"CPU": 2, "GPU": 1}
    # Provider-specific config for the head node, e.g. instance type. By default
    # Ray will auto-configure unspecified fields such as subnets and ssh-keys.
    # For more documentation on available fields, see:
    # https://cloud.google.com/compute/docs/reference/rest/v1/instances/insert
    node_config:
        machineType: n1-standard-2
        disks:
          - boot: true
            autoDelete: true
            type: PERSISTENT
            initializeParams:
              diskSizeGb: 150
              # See https://cloud.google.com/compute/docs/images for more images
              sourceImage: projects/ml-images/global/images/c0-deeplearning-common-cu121-v20231209-debian-11
        # Make sure to set scheduling->onHostMaintenance to TERMINATE when GPUs are present
        guestAccelerators:
          - acceleratorType: nvidia-tesla-t4
            acceleratorCount: 1
        metadata:
          items:
            - key: install-nvidia-driver
              value: "True"
        # Run workers on preemptible instance by default.
        # Comment this out to use on-demand.
        scheduling:
          - preemptible: true
          - onHostMaintenance: TERMINATE

# Specify the node type of the head node (as configured above).
head_node_type: ray_cpu_head

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
  "~/envs": "~/code/effective-ml-practical/3_ray/envs",
  "~/gcp": "~/code/effective-ml-practical/3_ray/cloud",
}


# Whether changes to directories in file_mounts or cluster_synced_files in the head node
# should sync to the worker node continuously
file_mounts_sync_continuously: False

# Patterns for files to exclude when running rsync up or rsync down
rsync_exclude:
    - "**/.git"
    - "**/.git/**"

# Pattern files to use for filtering out files when running rsync up or rsync down. The file is searched for
# in the source directory and recursively through all subdirectories. For example, if .gitignore is provided
# as a value, the behavior will match git's behavior for finding and using .gitignore files.
rsync_filter:
    - ".gitignore"

setup_commands:
  - ./gcp/scripts/setup_machine.sh

# Custom commands that will be run on the head node after common setup.
# Give the head node a unique name.
head_setup_commands:
  - sudo hostnamectl set-hostname aims-cpu-head-node
# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - ray stop
    - pkill prometheus || true # Kill prometheus if it is running
    - ray metrics launch-prometheus;
    - >-
      ray start
      --head
      --port=6379
      --dashboard-host 0.0.0.0
      --metrics-export-port=8080
      --num-cpus 0
      --object-manager-port=8076
      --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
    - >-
      ray start
      --address=$RAY_HEAD_IP:6379
      --object-manager-port=8076
